name: main.yml

on:
  push:
    branches: [ main, develop_backend ]
  pull_request:
    branches: [ main, develop_backend ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./ShoppingListApi

      # Check code formatting
      - name: Check code formatting
        run: dotnet format ./ShoppingListApi/ShoppingListApi.sln

      # Check for vulnerable dependencies and log output
      - name: Check for vulnerable dependencies and log output
        run: |
          dotnet list package --vulnerable > ./vulnerability-report.txt || true
          cat ./vulnerability-report.txt
        working-directory: ./ShoppingListApi

      # Upload vulnerability report
      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-report
          path: ./ShoppingListApi/vulnerability-report.txt

      # Build solution
      - name: Build solution
        run: dotnet build --no-restore
        working-directory: ./ShoppingListApi

      # Create test results directory
      - name: Create test results directory
        run: mkdir -p test-results
        working-directory: ./ShoppingListApi

      # Install Coverlet and ReportGenerator
      - name: Install Coverlet and ReportGenerator
        run: |
          dotnet tool install --global coverlet.console
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Run tests with coverage and log output
      - name: Run tests with coverage and log output
        run: |
          dotnet test ./ShoppingListApi/ShoppingListApi.csproj \
            --no-build \
            --no-restore \
            --collect:"XPlat Code Coverage" \
            --logger "trx;LogFileName=./test-results/test-results.trx" \
            --results-directory ./test-results || true
          echo "Test execution completed. Results are saved regardless of test failures."
          cat ./test-results/test-results.log
        working-directory: ./ShoppingListApi

      # Ensure coverage file is generated
      - name: Ensure coverage file is generated
        run: |
          if [ ! -f ./test-results/coverage.cobertura.xml ]; then
            echo "Coverage report not found!"
            exit 1
          fi
        working-directory: ./ShoppingListApi

      # Generate coverage report (Cobertura format)
      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:./ShoppingListApi/test-results/**/coverage.cobertura.xml \
            -targetdir:./ShoppingListApi/test-results/coverage-report \
            -reporttypes:Html
        working-directory: ./ShoppingListApi

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dotnet-test-log
          path: ./ShoppingListApi/test-results/

      # Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-coverage-report
          path: ./ShoppingListApi/test-results/coverage-report/
