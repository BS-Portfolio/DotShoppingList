// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingListApi.Data.Contexts;

#nullable disable

namespace ShoppingListApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250910100716_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ApiKey", b =>
                {
                    b.Property<Guid>("ApiKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApiKeyId");

                    b.HasIndex("ExpirationDateTime");

                    b.HasIndex("IsValid");

                    b.HasIndex("Key");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.EmailConfirmationToken", b =>
                {
                    b.Property<Guid>("EmailConfirmationTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpirationDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailConfirmationTokenId");

                    b.HasIndex("ExpirationDateTime");

                    b.HasIndex("IsUsed");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("EmailConfirmationTokens");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemAmount")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ListMembership", b =>
                {
                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ShoppingListId", "UserId", "UserRoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("ListMemberships");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ListUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress");

                    b.ToTable("ListUsers");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ShoppingList", b =>
                {
                    b.Property<Guid>("ShoppingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShoppingListName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShoppingListId");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EnumIndex")
                        .HasColumnType("int");

                    b.Property<string>("UserRoleTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserRoleId");

                    b.HasIndex("EnumIndex");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ApiKey", b =>
                {
                    b.HasOne("ShoppingListApi.Model.Entity.ListUser", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.EmailConfirmationToken", b =>
                {
                    b.HasOne("ShoppingListApi.Model.Entity.ListUser", "User")
                        .WithMany("EmailConfirmationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.Item", b =>
                {
                    b.HasOne("ShoppingListApi.Model.Entity.ShoppingList", "ShoppingList")
                        .WithMany()
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ListMembership", b =>
                {
                    b.HasOne("ShoppingListApi.Model.Entity.ShoppingList", "ShoppingList")
                        .WithMany("ListMemberships")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListApi.Model.Entity.ListUser", "User")
                        .WithMany("ListMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingListApi.Model.Entity.UserRole", "UserRole")
                        .WithMany("ListMemberships")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingList");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ListUser", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("EmailConfirmationTokens");

                    b.Navigation("ListMemberships");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.ShoppingList", b =>
                {
                    b.Navigation("ListMemberships");
                });

            modelBuilder.Entity("ShoppingListApi.Model.Entity.UserRole", b =>
                {
                    b.Navigation("ListMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
